# Auto detect text files and perform LF normalization
* text=auto
# Import libraries for webhooks and rich embeds
import discord
from discord import Webhook, Embed

# Import library for OP.GG API
import opgg

import requests
import datetime
import time

while True:
    # Get the current time
    now = datetime.datetime.now()

    # Set the time to 8pm
    target_time = datetime.datetime(now.year, now.month, now.day, now.hour, 0, 0)

    # Get the difference in time
    time_diff = target_time - now

    # Sleep for the difference in time
    time.sleep(time_diff.seconds)

    # Array of usernames to query
    usernames = ["Fake News Media", "captiands", "LeagueSuxxss", "aduhqpwhb", "slimeyt"]

    # Iterate through the usernames
    for username in usernames:

        # Query the API
        url = 'https://na.op.gg/summoner/userName=' + username
        response = requests.get(url)

        # Parse the response to get the rank
        if response.status_code == 200:
            rank = response.text.split('<div class="TierRank">')[1].split('</div>')[0]
            print(username + "'s rank is: " + rank)
        else:
            print("Error: Could not fetch rank for " + username)

    # Sleep for 1 hour
    
    time.sleep(3600)
    # Function to print the usernames and their ranks
def print_ranks():
    for username in usernames:
        # Query the API
        url = 'https://na.op.gg/summoner/userName=' + username
        response = requests.get(url)

        # Parse the response to get the rank
        if response.status_code == 200:
            rank = response.text.split('<div class="TierRank">')[1].split('</div>')[0]
            print(username + "'s rank is: " + rank)
        else:
            print("Error: Could not fetch rank for " + username)

# Function to handle the command
def handle_leaderboards():
    print("Leaderboard:")
    print_ranks()

# Add code for handling the /Leaderboards command
@bot.command(name='Leaderboards')
async def leaderboards(ctx):
    handle_leaderboards()